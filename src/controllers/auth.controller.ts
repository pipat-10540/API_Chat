import { Request, Response, Router } from "express";
import { pool } from "../db";
// import { sha512 } from "js-sha512";
import { pusher } from "../pusher";
import type { SessionUser } from "../types";
import nodemailer from "nodemailer";
import { apiResponse } from "../model/Response/response_standard";
import bcrypt from "bcrypt";

export default class AuthController {
  //#region POST /register
  // ‡πÉ‡∏ô route: upload.single('image')
  async register(req: Request, res: Response) {
    const { username, ticket, email, fullname } = req.body ?? {};
    const profile_image = req.file ? req.file.buffer : null;

    if (!username || !ticket || !email || !fullname) {
      return res
        .status(400)
        .json({ ok: false, message: "Missing required fields" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ã‡πâ‡∏≥ email ‡∏´‡∏£‡∏∑‡∏≠ username
    const [exists] = await pool.query(
      "SELECT id FROM accounts WHERE email=? OR username=?",
      [email, username]
    );
    if ((exists as any[]).length > 0) {
      return res
        .status(409)
        .json({ ok: false, message: "Email or username already exists" });
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ticket ‡πÄ‡∏õ‡πá‡∏ô bcrypt hash
    const hashedTicket = await bcrypt.hash(ticket, 10);
    await pool.query(
      "INSERT INTO accounts (username, ticket, email, fullname, profile_image) VALUES (?, ?, ?, ?, ?)",
      [username, hashedTicket, email, fullname, profile_image]
    );

    return res.json({ ok: true, message: "Register success" });
  }
  //#endregion

  //#region  POST /login
  async login(req: Request, res: Response) {
    const { email, ticket } = req.body ?? {};
    if (!email || !ticket) {
      return res
        .status(400)
        .json({ ok: false, message: "Missing email or ticket" });
    }

    // ‡∏î‡∏∂‡∏á user ‡∏ï‡∏≤‡∏° email
    const [rows] = await pool.query(
      "SELECT id, username, email, fullname, ticket FROM accounts WHERE email=?",
      [email]
    );
    const list = rows as Array<any>;
    if (list.length === 1) {
      const user = list[0];
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ bcrypt
      const match = await bcrypt.compare(ticket, user.ticket);
      if (match) {
        const u: SessionUser = {
          id: user.id,
          email: user.email,
          username: user.username,
          fullname: user.fullname,
          isAdmin: user.username === "admin",
        };
        (req.session as any).user = u;
        return res.json({ ok: true, user: u });
      }
    }
    return res.status(401).json({ ok: false, message: "Invalid credentials" });
  }
  //#endregion

  //#region // GET /me
  async me(req: Request, res: Response) {
    const user = (req.session as any).user as SessionUser | undefined;
    if (!user) return res.status(401).json({ ok: false });
    res.json({ ok: true, user });
  }
  //#endregion

  //#region // GET /users
  async users(req: Request, res: Response) {
    const user = (req.session as any).user as SessionUser | undefined;
    if (!user)
      return res.status(401).json({ ok: false, message: "Not authenticated" });

    // ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    const [rows] = await pool.query(
      "SELECT id, username, fullname, email FROM accounts WHERE id != ?",
      [user.id]
    );
    res.json({ ok: true, users: rows });
  }
  //#endregion

  //#region // POST /logout
  async logout(req: Request, res: Response) {
    req.session.destroy(() => res.json({ ok: true }));
  }
  //#endregion

  //#region forgotPassword
  async forgotPassword(req: Request, res: Response) {
    const { email } = req.body;
    console.log("REQ BODY:", req.body);
    if (!email) {
      return res.status(200).json({
        success: false,
        message: "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•",
        statusCode: 200,
      });
    }

    try {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô DB
      const [rows]: any = await pool.query(
        "SELECT id, email, fullname FROM accounts WHERE email = ?",
        [email]
      );
      if (rows.length === 0) {
        return res.status(200).json({
          success: false,
          message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ",
          statusCode: 200,
        });
      }

      const user = rows[0];

      // üîê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ token ‡∏î‡πâ‡∏ß‡∏¢)
      const resetLink = `http://localhost:3000/reset-password?user=${user.id}`;

      // ‚úâÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á transporter ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡∏ú‡πà‡∏≤‡∏ô Gmail
      const transporter = nodemailer.createTransport({
        service: "gmail",
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS,
        },
      });

      // üì® ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      await transporter.sendMail({
        from: `"Tissue" <${process.env.EMAIL_USER}>`,
        to: user.email,
        subject: "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        html: `
        <p>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${user.fullname},</p>
        <p>‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
        <p>‡∏Ñ‡∏•‡∏¥‡∏Å <a href="${resetLink}">‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</a> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
        <p>‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ</p>
        <br />
        <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞<br/>Tissue Support</p>
      `,
      });

      return res.status(200).json({
        success: true,
        message:
          "‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        statusCode: 200,
      });
    } catch (err: any) {
      console.error("‚ùå Send Mail Error:", err);
      return res
        .status(404)
        .json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", statusCode: 404 });
    }
  }
  //#endregion

  //#region resetPassword
  async resetPassword(
    req: Request,
    res: Response<apiResponse>
  ): Promise<Response<apiResponse>> {
    const { userId, newPassword } = req.body;

    try {
      const hashedPassword = await bcrypt.hash(newPassword, 10);
      const [result]: any = await pool.query(
        "UPDATE accounts SET ticket = ? WHERE id = ?",
        [hashedPassword, userId]
      );
      if (result.affectedRows === 0) {
        return res
          .status(200)
          .json({ success: false, message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", statusCode: 200 });
      }

      return res.status(200).json({
        success: true,
        message: "‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        statusCode: 200,
      });
    } catch (error: any) {
      console.error("‚ùå Reset Error:", error);
      return res
        .status(404)
        .json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", statusCode: 404 });
    }
  }
  //#endregion
}
